//--------------------------------------------------------------
// 简称: OutsideFallChannel
// 名称: 破下跌通道
// 类型: 用户函数
// 输出: Numeric
//--------------------------------------------------------------
Params
	NumericArrayRef highArr;
	Numeric slope;
	NumericArrayRef aArr;
	NumericArrayRef bArr;
Vars
	Integer i;
	Integer k;
	Integer m;
Begin
	// 第一步，先找所有的边界线
	// 这里严格的说，应该遍历所有点，但是快速处理，只取顶底分型
	// 高点
	NumericArray yArray;
	NumericArray xArray;
	Integer size = ArrLength(highArr);
	//Commentary("highArr size:"+Text(size));
	for i = 0 to size-1 {
		ArrAdd(xArray, i);
		ArrAdd(yArray, highArr[i]);
		/*if (i == 0 && size > 1) {
			if (highArr[i] <= highArr[i+1]) {
				ArrAdd(xArray, i);
				ArrAdd(yArray, highArr[i]);
			}
		} else if (i == size-1 && size > 1) {
			if (highArr[i] <= highArr[i-1]) {
				ArrAdd(xArray, i);
				ArrAdd(yArray, highArr[i]);
			}
		} else if (highArr[i] <= highArr[i-1] && highArr[i] <= highArr[i+1]) {
			ArrAdd(xArray, i);
			ArrAdd(yArray, highArr[i]);
		}*/
	}
	//ShowArr("xArray", xArray);
	//ShowArr("yArray", yArray);
	
	// 第二步，选择合适的边界线
	// 采用通用方案，遍历
	size = ArrLength(xArray);
	
	Numeric distance;
	for distance=0 to (size-1)/2 {
		Numeric real_distance = size - 1 - distance;
		Numeric step;
		for step=0 to real_distance {
			for i=0 to step {
				//right -> left
				Numeric real_step = real_distance - step;
				if (i+real_step <= size-1) {
					Bool flag = True;
					Integer x1 = xArray[size-1-i-real_step];
					Numeric y1 = yArray[size-1-i-real_step];
					Integer x2 = xArray[size-1-i];
					Numeric y2 = yArray[size-1-i];
					if ((y2-y1)/(x2-x1)*slope > 0) {
						//遍历所有的点，都符合才行
						for m=0 to size-1 {
							Integer x =  xArray[m];
							Numeric y = y1 + (x - x1)*(y2-y1)/(x2-x1);
							Numeric diff = yArray[m] - y;//实际值，减去预计值
							if (slope > 0) {
								if (diff < 0) {
									flag = False;
									break;
								}
							}
							if (slope < 0) {
								if (diff > 0) {
									flag = False;
									break;
								}
							}
						}
						//如果符合就直接返回
						if (flag) {
							//Commentary("1 allow x,y:("+Text(x1)+","+Text(y1)+"), (" +Text(x2)+","+Text(y2)+")");
							//获得 a b，并加入到数组
							Numeric a = (y2-y1)/(x2-x1);
							Numeric b = y1 - a*x1;
							
							if (a * slope <= 0) {
								Continue;
							}
							
							size = ArrLength(aArr);
							Bool isExists = False;
							for i=0 to size-1 {
								if (aArr[i] == a && bArr[i] == b) {
									isExists = True;
									break;
								}
							}
							if (! isExists) {
								ArrAdd(aArr, a);
								ArrAdd(bArr, b);
							}
						}
					}
				}
				//left -> right
				if (i+real_step <= size-1) {
					Bool flag = True;
					Integer x1 = xArray[i];
					Numeric y1 = yArray[i];
					Integer x2 = xArray[i+real_step];
					Numeric y2 = yArray[i+real_step];
					// 限制斜率一致，避免奇葩结果
					if ((y2-y1)/(x2-x1)*slope > 0) {
						//遍历所有的点，都符合才行
						for m=0 to size-1 {
							Integer x =  xArray[m];
							Numeric y = y1 + (x - x1)*(y2-y1)/(x2-x1);
							Numeric diff = yArray[m] - y;//实际值，减去预计值
							if (slope > 0) {
								if (diff < 0) {
									flag = False;
									break;
								}
							}
							if (slope < 0) {
								if (diff > 0) {
									flag = False;
									break;
								}
							}
						}
					}
					//如果符合就直接返回
					if (flag) {
						//Commentary("2 allow x,y:("+Text(x1)+","+Text(y1)+"), (" +Text(x2)+","+Text(y2)+")");
						//获得 a b，并加入到数组
						Numeric a = (y2-y1)/(x2-x1);
						Numeric b = y1 - a*x1;
						
						if (a == 0) {
							Continue;
						}
						
						size = ArrLength(aArr);
						Bool isExists = False;
						for i=0 to size-1 {
							if (aArr[i] == a && bArr[i] == b) {
								isExists = True;
								break;
							}
						}
						if (! isExists) {
							ArrAdd(aArr, a);
							ArrAdd(bArr, b);
						}
					}
				}
			}
		}
	}
	
	//ShowArr("aArr", aArr);
	//ShowArr("bArr", bArr);
	Return 0;
End