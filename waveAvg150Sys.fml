//------------------------------------------------------------------------
// 简称:waveAvg150Sys
// 名称:均线数浪系统
// 类别: 交易指令
// 类型: 用户应用
//------------------------------------------------------------------------
Params         
		Numeric Lots(1);
		
GlobalVars
Vars
		Bool flag(False);
		Integer minCount(0);
		Integer maxCount(0);
		NumericSeries avg10;
		NumericSeries lowArr;
		NumericSeries highArr;
		NumericSeries closeArr;
		NumericSeries avg150;
		Integer standLimit(3);
		Integer offset;
		Integer i;
		
		Integer lastMin(-1);
		Integer lastMax(-1);
		Integer oldMin;
		Integer oldMax;
		Numeric lastEnter(0);//[index 10] 0: init  >0 buy  <0 sell
		Numeric profit(0);//[index 11] 0: init  >0 buy  <0 sell
		Integer lastPosition(0);//[index 12] 0
		
		Integer index0;
		Integer index1;
		Integer m;
		Integer x1;
		Integer x2;
		Numeric y1;
		Numeric y2;
		Numeric slope(0);
		Numeric diff;
		Numeric yMax;
		Numeric yMin;
		Integer startX;
		Numeric xMean;
		Numeric yMean;
		Numeric xSum;
		Numeric ySum;
		Numeric k;
		Numeric b;
		Integer xLeft;
		Integer xRight;
		Numeric yLeft;
		Numeric yRight;
		Numeric A_Sum;
		Numeric B_Sum;
		Numeric C_Sum;
		Numeric D_Sum;
		Numeric x_i;
		Numeric y_i;
		Integer currentIndex;
		NumericArray bottomArr;
		NumericArray topArr;
		
		Integer highCntFromLastMin(0);
		Integer lowCntFromLastMin(0);
		
		Integer highCntFromLastMax(0);
		Integer lowCntFromLastMax(0);
		Numeric tmp;
				
Begin
		
		// wave数浪
		//commentary("start="+text(currenttime));
		avg150 = AverageFC(Close, 150);
		avg10  = AverageFC(Close, 10);
		lowArr = AverageFC(Low, 1);
		highArr= AverageFC(High, 1);
		if (CurrentBar == 0) {
			SetGlobalVar(0, -1);
			SetGlobalVar(1, -1);
			
			SetGlobalVar(10, 0);
			SetGlobalVar(11, 0);
			SetGlobalVar(12, 0);
			
			SetGlobalVar(49, -1);
			SetGlobalVar(39, -1);
		}
		lastMin = GetGlobalVar(0);
		lastMax = GetGlobalVar(1);
		oldMin = lastMin;
		oldMax = lastMax;
		
		lastEnter = GetGlobalVar(10);
		profit = GetGlobalVar(11);
		lastPosition = GetGlobalVar(12);
		
		//UnPlotPartLine("tail", highArr[1]);
		//UnPlotPartLine("tail", lowArr[1]);
		
		index0 = GetGlobalVar(49);//表示待写入值
		index1 = GetGlobalVar(39);//表示待写入值
		
		//设置第一个Dot
		if (lastMax == -1) {
			maxCount = 0;
			for i=0 to CurrentBar {
				if (lowArr[i] > avg10[i]){
					maxCount += 1;
				}
				//绘制
				if (maxCount >= standLimit && lastMax == -1) {
					lastMax = i;
					SetGlobalVar(1, i);
					break;
				}
			}
		}
		//设置第一个Dot
		if (lastMin == -1) {
			minCount = 0;
			for i=0 to CurrentBar {
				if (highArr[i] < avg10[i]) {
					minCount += 1;
				}
				//绘制
				if (minCount >= standLimit && lastMin == -1) {
					lastMin = i;
					SetGlobalVar(0, i);
					break;
				}
			}
		}
		if (lastMax == -1 && lastMin == -1) {
			//
		} else {
			if (lastMax == -1) {
				lastMax = 0;
			}
			if (lastMin == -1) {
				lastMin = 0;
			}
			// 统计数据
			for offset = 0 to CurrentBar - lastMax {
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMax += 1;
				} 
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMax += 1;
				}
			}
			for offset = 0 to CurrentBar - lastMin{
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMin += 1;
				}
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMin += 1;
				}
			}
			// 判断1：掉头向下？
			if (lastMin < lastMax) {
				if (highCntFromLastMin >= standLimit) {
					//高度比较
					if (highArr[CurrentBar - lastMax] > highArr[0]){
						//keep old
					} else{
						//更高
						lastMax = CurrentBar;
						SetGlobalVar(1, CurrentBar);
					}
				}
				if (lowCntFromLastMax >= standLimit) {
					//保存上一个lastMin
					index0 = (index0 +1)%9;
					SetGlobalVar(40 + index0, lastMin);
					SetGlobalVar(49, index0);
					
					lastMin = CurrentBar;
					SetGlobalVar(0, CurrentBar);
					
					
				}
			} else if(lastMin > lastMax) {
				//判断2：掉头向上？
				if (lowCntFromLastMax >= standLimit) {
					//高度比较
					if (lowArr[CurrentBar - lastMin] < lowArr[0]) {
						//keep
					} else {
						//更低
						lastMin = CurrentBar;
						SetGlobalVar(0, CurrentBar);
					}
				}
				if (highCntFromLastMin >= standLimit) {
					index1 = (index1 +1)%9;
					SetGlobalVar(30+index1, lastMax);
					SetGlobalVar(39, index1);
					//保存上一个lastMax
					lastMax = CurrentBar;
					SetGlobalVar(1, CurrentBar);
				}
			}
		}
		
		//画线数浪
		if (oldMin > oldMax &&lastMax > oldMax) {
		 	x1 = CurrentBar-oldMax;
			y1 = highArr[CurrentBar-oldMax];
			x2 = CurrentBar-oldMin;
			y2 = lowArr[CurrentBar-oldMin];
/*			PartLine("area1", x1, y1, x2, y1, White);
			PartLine("area2", x2, y1, x2, y2, White);
			PartLine("area3", x2, y2, x1, y2, White);
			PartLine("area4", x1, y2, x1, y1, White);*/
			
			PartLine("minMax2", CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-oldMin, lowArr[CurrentBar-oldMin], Cyan);
		}
		if (oldMax >oldMin && lastMin > oldMin){
			x1 = CurrentBar-oldMin;
			y1 = lowArr[CurrentBar-oldMin];
			x2 = CurrentBar-oldMax;
			y2 = highArr[CurrentBar-oldMax];
/*			PartLine("area1", x1, y1, x2, y1, White);
			PartLine("area2", x2, y1, x2, y2, White);
			PartLine("area3", x2, y2, x1, y2, White);
			PartLine("area4", x1, y2, x1, y1, White);*/
			PartLine("minMax2", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-oldMax, highArr[CurrentBar-oldMax], Cyan);
		}
		
		if (lastMax == oldMax && lastMin == oldMin) {
				if ( lastMin > lastMax ) {
					PartLine("tail",CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMin, lowArr[CurrentBar-lastMin], Magenta);	
				} else {
					PartLine("tail", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-lastMax, highArr[CurrentBar-lastMax], Magenta);
				}
		}
		//判断通道
		Bool isOutsideRiseChannel = False;
		PlotNumeric("CurrentBar:", CurrentBar);
		PlotNumeric("lastMax:", lastMax);
		PlotNumeric("oldMin:", oldMin);
		// 开始下跌了
		//if (lastMin == oldMin && CurrentBar - lastMax >= 2) {
		if (lastMax > oldMin) {
			Commentary("==============================");
			NumericArray xArr;
			NumericArray yArr;
			NumericArray highPartArr;
			NumericArray lowPartArr;
			NumericArray dstXArr;
			NumericArray dstValueArr;
			Numeric y;
			Numeric base = lowArr[CurrentBar-oldMin];
			for i=0 to lastMax - oldMin {
				offset = CurrentBar-oldMin - i;
				y = highArr[offset];
				ArrAdd(highPartArr, y - base);
				y = lowArr[offset];
				ArrAdd(lowPartArr, y - base);
				
				ArrAdd(xArr, i);
				ArrAdd(yArr, highArr[offset] - base);
				ArrAdd(xArr, i);
				ArrAdd(yArr, lowArr[offset] - base);
			}
			GetPenArrow(highPartArr, lowPartArr, dstXArr, dstValueArr, 1);
			//fit
			Numeric a;
			if (ArrLength(dstXArr) <= 3) {
				//fit line
			} else {
				//a = getFitLine(xArr, lowPartArr);
				a = getFitLine(dstXArr, dstValueArr);
			}
			//有了a，遍历，找最小的 b，使得 y=a*x+b
			Numeric minValue = highArr[0];
			for i=0 to lastMax - oldMin {
				offset = CurrentBar-oldMin - i;
				Numeric curValue = lowArr[offset] - a*i;
				if (curValue < minValue) {
					minValue = curValue;
					Commentary("minValue:"+Text(minValue));
				}
			}
			//绘图
			x1 = 0;
			y1 = minValue;
			x2 = lastMax - oldMin;
			y2 = a*x2 + minValue;
			PartLine("downChannel", CurrentBar - oldMin, y1, CurrentBar - lastMax, y2, White);
			
			Commentary("a:"+Text(a));
			Commentary("y1:"+Text(y1));
			Commentary("y2:"+Text(y2));
		}
		return;
		
		
		
End

