//------------------------------------------------------------------------
// 简称:WaveMachine
// 名称:计算机数浪
// 类别: 交易指令
// 类型: 用户应用
//------------------------------------------------------------------------
Params         
        //参数定义
		Numeric TimeFrame(240);                // 目标时间周期参数，参数说明参见MtBar
        Numeric BarsBack(1);                 // 目标时间周期BAR偏移参数，说明见MtBar函数
        Numeric FastLength(12);
        Numeric SlowLength(26);
        Numeric MACDLength(9);
    	Numeric Lots(1);
		
GlobalVars
Vars
		Bool flag(False);
		Integer minCount(0);
		Integer maxCount(0);
		NumericSeries avg10;
		NumericSeries lowArr;
		NumericSeries highArr;
		NumericSeries macd240Arr;
		Integer offset;
		Integer i;
		
		Integer lastMin(-1);
		Integer lastMax(-1);
		Integer oldMin;
		Integer oldMax;
		Integer index0;
		Integer index1;
		Integer m;
		Integer x;
		Integer x1;
		Integer x2;
		Numeric y1;
		Numeric y2;
		Numeric y;
		Numeric slope;
		Numeric diff;
		Numeric yMax;
		Numeric yMin;
		Integer startX;
		Numeric xMean;
		Numeric yMean;
		Numeric xSum;
		Numeric ySum;
		Numeric k;
		Numeric b;
		Integer xLeft;
		Integer xRight;
		Numeric yLeft;
		Numeric yRight;
		Numeric A_Sum;
		Numeric B_Sum;
		Numeric C_Sum;
		Numeric D_Sum;
		Numeric x_i;
		Numeric y_i;
		Integer currentIndex;
		NumericArray bottomArr;
		NumericArray topArr;
		
		Integer highCntFromLastMin(0);
		Integer lowCntFromLastMin(0);
		
		Integer highCntFromLastMax(0);
		Integer lowCntFromLastMax(0);
		Numeric tmp;
		
		//macd240
		NumericSeries MACDValue;
        NumericSeries AvgMACD;
        NumericSeries MACDDiff;
        Numeric ooMACDValue;
        Numeric ooAvgMACD;
        Numeric PreBar;
				
Begin
		// macd
		PreBar = MtMACD(TimeFrame,BarsBack,FastLength,SlowLength,MACDLength,ooMACDValue,ooAvgMACD);
        MACDVAlue = ooMACDValue;
        AvgMACD = ooAvgMACD;
        MACDDiff = MACDValue - AvgMACD;
		
		// wave数浪
		//commentary("start="+text(currenttime));
		avg10  = AverageFC(Close, 10);
		lowArr = AverageFC(Low, 1);
		highArr= AverageFC(High, 1);
		if (CurrentBar == 0) {
			SetGlobalVar(0, -1);
			SetGlobalVar(1, -1);
			
			SetGlobalVar(49, -1);
			SetGlobalVar(39, -1);
		}
		lastMin = GetGlobalVar(0);
		lastMax = GetGlobalVar(1);
		oldMin = lastMin;
		oldMax = lastMax;
		
		//UnPlotPartLine("tail", highArr[1]);
		//UnPlotPartLine("tail", lowArr[1]);
		
		index0 = GetGlobalVar(49);//表示待写入值
		index1 = GetGlobalVar(39);//表示待写入值
		
		//设置第一个Dot
		if (lastMax == -1) {
			maxCount = 0;
			for i=0 to CurrentBar {
				if (lowArr[i] > avg10[i]){
					maxCount += 1;
				}
				//绘制
				if (maxCount >= 3 && lastMax == -1) {
					lastMax = i;
					SetGlobalVar(1, i);
					break;
				}
			}
		}
		//设置第一个Dot
		if (lastMin == -1) {
			minCount = 0;
			for i=0 to CurrentBar {
				if (highArr[i] < avg10[i]) {
					minCount += 1;
				}
				//绘制
				if (minCount >= 3 && lastMin == -1) {
					lastMin = i;
					SetGlobalVar(0, i);
					break;
				}
			}
		}
		if (lastMax == -1 && lastMin == -1) {
			//
		} else {
			if (lastMax == -1) {
				lastMax = 0;
			}
			if (lastMin == -1) {
				lastMin = 0;
			}
			for offset = 0 to CurrentBar - lastMax {
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMax += 1;
				} 
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMax += 1;
				}
			}
			for offset = 0 to CurrentBar - lastMin{
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMin += 1;
				}
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMin += 1;
				}
			}
			//判断1
			if (lastMin < lastMax) {
				if (highCntFromLastMin >= 3) {
					//高度比较
					if (highArr[CurrentBar - lastMax] > highArr[0]){
						//keep old
					} else{
						//更高
						lastMax = CurrentBar;
						SetGlobalVar(1, CurrentBar);
					}
				}
				if (lowCntFromLastMax >= 3) {
					//保存上一个lastMin
					index0 = (index0 +1)%9;
					SetGlobalVar(40 + index0, lastMin);
					SetGlobalVar(49, index0);
					
					lastMin = CurrentBar;
					SetGlobalVar(0, CurrentBar);
				}
			} else if(lastMin > lastMax) {
				if (lowCntFromLastMax >= 3) {
					//高度比较
					if (lowArr[CurrentBar - lastMin] < lowArr[0]) {
						//keep
					} else {
						//更低
						lastMin = CurrentBar;
						SetGlobalVar(0, CurrentBar);
					}
				}
				if (highCntFromLastMin >= 3) {
					index1 = (index1 +1)%9;
					SetGlobalVar(30+index1, lastMax);
					SetGlobalVar(39, index1);
					//保存上一个lastMax
					lastMax = CurrentBar;
					SetGlobalVar(1, CurrentBar);
				}
			}
		}
		//Plotnumeric("lowArr[CurrentBar-lastMin]",lowArr[CurrentBar - lastMin]);
		//Plotnumeric("lowArr[CurrentBar]",lowArr[0]);
		//Plotnumeric("avg10[CurrentBar]",avg10[0]);
		
		// 打印记录的索引值
		//Plotnumeric("oldMax",oldMax);
		//Plotnumeric("oldMin",oldMin);
		//SetGlobalLoop0(CurrentBar);
		//PlotNumeric("oldMin", tmp);
		
		if (oldMin > oldMax &&lastMax > oldMax) {
			PartLine("minMax2", CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-oldMin, lowArr[CurrentBar-oldMin]);
		}
		if (oldMax >oldMin && lastMin > oldMin){
			PartLine("minMax2", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-oldMax, highArr[CurrentBar-oldMax]);
		}
		
		//we has lastMax/lastMin
/*		PlotNumeric("CurrentBar", CurrentBar);
		PlotNumeric("lastMax", lastMax);
		PlotNumeric("lastMin", lastMin);
		PlotNumeric("oldMax", oldMax);
		PlotNumeric("oldMin", oldMin);*/
		//PartLine("tail",CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMin, lowArr[CurrentBar-lastMin]);	
		
		if (lastMax == oldMax && lastMin == oldMin
				) {
				if ( lastMin > lastMax ) {
					PartLine("tail",CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMin, lowArr[CurrentBar-lastMin]);	
				} else {
					PartLine("tail", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-lastMax, highArr[CurrentBar-lastMax]);
				}
		}
/*		if (lastMin > oldMax && 
				oldMax > oldMin
				&& lastMax == oldMax) {
			PartLine("tail",CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMin, lowArr[CurrentBar-lastMin]);	
			//PartLine("tail",CurrentBar-oldMax, highArr[CurrentBar-oldMax], 0, lowArr[CurrentBar-lastMin]);	
		} else if (lastMax > oldMin &&
				oldMin > oldMax) {
			//PartLine("tail", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-lastMax, highArr[CurrentBar-lastMax]);			
		}*/
/*		if (lastMax == oldMax && lastMin == oldMin) {
			if (oldMin > oldMax) {
				//PartLine("tail", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], 0,  highArr[0]);
			} else {
				PartLine("tail", CurrentBar-oldMax, highArr[CurrentBar-oldMax], 0,  lowArr[0]);
			}
			
			lastMax > lastMin && 
			lastMin > lastMax &&
				
		}*/
		
		//打印 Bar 的 index	
		//Plotnumeric("CurrentBar",CurrentBar);
		
		//Plotnumeric("highCntFromLastMax",highCntFromLastMax);
		//Plotnumeric("lowCntFromLastMax",lowCntFromLastMax);
		//Plotnumeric("highCntFromLastMin",highCntFromLastMin);
		//Plotnumeric("lowCntFromLastMin",lowCntFromLastMin);
		
		// 最后一个高点、最后一个低点会被丢掉
		//commentary("end="+text(currenttime));
		//commentary("currentbar="+text(currentbar));
/*		for i = 0 to 9 {
			tmp = GetGlobalVar(40 + i);
			//commentary("tmp="+text((i+1)*100000 +tmp));
			tmp = GetGlobalVar(30 + i);
			//commentary("tmp="+text((i+1)*100000 +tmp));
		}*/
/*		// 绘制最近的通道线
		index0 = GetGlobalVar(49);
		index1 = GetGlobalVar(39);
		oldMin = GetGlobalVar(40+index0);
		oldMax = GetGlobalVar(30+index1);
		lastMin = GetGlobalVar(0);
		lastMax = GetGlobalVar(1);
		//commentary("oldMin"+text(oldMin));
		//commentary("oldMax"+text(oldMax));
		//commentary("lastMin"+text(lastMin));
		//commentary("lastMax"+text(lastMax));
		
		// y = y1 +[(y2-y1)/(x2-x1)]*(x-x1)
		y1 = lowArr[CurrentBar-oldMin];
		y2 = lowArr[CurrentBar-lastMin];
		x1 = oldMin;
		x2 = lastMin;
		
		yMin = y1 + (CurrentBar - x1)*(y2-y1)/(x2-x1);
		
		y1 = lowArr[CurrentBar-oldMax];
		y2 = lowArr[CurrentBar-lastMax];
		x1 = oldMax;
		x2 = lastMax;
		yMax = y1 + (CurrentBar - x1)*(y2-y1)/(x2-x1);*/
		
		
		/*if (BarStatus == 2) {
		//if (CurrentBar == 4800) {
			//PartLine("TrendMin", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-lastMin, lowArr[CurrentBar-lastMin]);
			//PartLine("TrendMin", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], 0, yMin);
			//PartLine("TrendMax", CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMax, highArr[CurrentBar-lastMax]);
			//PartLine("TrendMax", CurrentBar-oldMax, highArr[CurrentBar-oldMax],0, yMax);
			
			// 往前回溯，找到金叉位置
			tmp = MACDDiff;
			for i=1 to 300 {
				if (MACDDiff[i]*tmp <= 0) {
					//if ((MACDValue[CurrentBar-i+1] >= AvgMACD[CurrentBar-i+1]) &&
					//(MACDValue[CurrentBar-i-1] <= AvgMACD[CurrentBar-i-1])) {
						//Commentary("MACDValue[CurrentBar-i-1]"+Text(MACDValue[CurrentBar-i-1]));
						//Commentary("AvgMACD[CurrentBar-i-1]"+Text(AvgMACD[CurrentBar-i-1]));
						//Commentary("MACDValue[CurrentBar-i+1]"+Text(MACDValue[CurrentBar-i+1]));
						//Commentary("AvgMACD[CurrentBar-i+1]"+Text(AvgMACD[CurrentBar-i+1]));
						
						Commentary("i"+Text(i));
						Commentary("MACDDiff[i]"+Text(MACDDiff[i]));
						//PlotNumeric("cross", i);
					offset = i;
					break;
				}
			}
			// 最小二乘法：从金叉位置，拟合曲线。
			for i=0 to 4 {
				SetGlobalVar(10+i, i*2+1);
			}
			
			xMean = 0;
			yMean = 0;
			xSum = 0;
			ySum = 0;
			A_Sum = 0;
			C_Sum = 0;
			//offset = 2;
			for i = 1 to offset {
			//for i = 0 to offset {
				//x_i = i;
				//y_i = GetGlobalVar(10+i);
				x_i = CurrentBar - (offset - i);
				y_i = highArr[offset - i];
				xSum += x_i;
				ySum += y_i;
				Commentary("i= " + text(i) + " x_i=" + text(x_i) + " y_i=" + text(y_i));
				
				A_Sum += x_i * y_i;
				C_Sum += x_i * x_i;
			Commentary("A_Sum=" + text(A_Sum));
			Commentary("B_Sum=" + text(B_Sum));
			Commentary("C_Sum=" + text(C_Sum));
			Commentary("D_Sum=" + text(D_Sum));
			}
			B_Sum = xSum*ySum/offset;
			D_Sum = xSum*xSum/offset;
			xMean = xSum/offset;
			yMean = ySum/offset;
			Commentary("offset=" + text(offset));
		 	Commentary("xSum=" + text(xSum));
			Commentary("ySum=" + text(ySum));
			Commentary("A_Sum=" + text(A_Sum));
			Commentary("B_Sum=" + text(B_Sum));
			Commentary("C_Sum=" + text(C_Sum));
			Commentary("D_Sum=" + text(D_Sum));
			
			k = (A_Sum - B_Sum)/(C_Sum - D_Sum);
			b = yMean - k *xMean;
			// 计算2个端点的位置
			xLeft = CurrentBar - offset;
			xRight= CurrentBar;
			yLeft = k * xLeft + b;
			yRight = k * yLeft + b;
			//PartLine("trend", offset, yLeft, 0, yRight);
			
			slope = k;
			 Commentary("k=" + text(k));
			 Commentary("b=" + text(b));
			 Commentary("startX=" + text(startX));
			 Commentary("yMean=" + text(yMean));
			 Commentary("xMean=" + text(xMean));
			 Commentary("yLeft=" + text(yLeft));
			 Commentary("yRight=" + text(yRight));
			
			// 这里采用通俗做法，找极值点，然后判断位置
			Commentary("offset " + Text(offset));
			for i = 0 to offset {
				x_i = CurrentBar - offset + i;
				// 底分型
				if ((lowArr[i] <= lowArr[i+1]) && 
				    (lowArr[i] <= lowArr[i-1])) {
					//添加到数组中
					Commentary("low x_i " + Text(x_i));
					ArrAdd(bottomArr, x_i);
					//PartLine("low_showArr"+Text(i), 0, lowArr[0],  i, lowArr[i]);
				}
			}
			for i = 0 to offset {
				// 左边第一个要遍历的 K 线
				x_i = CurrentBar - offset + i;
				//顶分型
				if ((highArr[offset - i] >= highArr[offset - i+1]) &&
					(highArr[offset - i] >= highArr[offset - i-1]) ) {
					//添加到数组中
					Commentary("high i " + Text(x_i));
					ArrAdd(topArr, x_i);
					if (i == 3 || i== 4) {
						//PartLine("high_showArr"+Text(i), 3, highArr[3],  offset - i, highArr[offset - i]);
					}
					//break;
				}
			}
			// 最小值
			for i = 0 to ArrLength(bottomArr)-2 {
				for k = i+1 to ArrLength(bottomArr)-1 {
					// 获得所有的直线，判断是否都大于等于0
					// y = y1 +[(y2-y1)/(x2-x1)]*(x-x1)
					x1 = bottomArr[i];
					x2 = bottomArr[k];
					y1 = lowArr[CurrentBar-x1];
					y2 = lowArr[CurrentBar-x2];
					// 斜率匹配最小二乘法的结果
					if ((y2-y1)/(x2-x1)*slope <= 0) {
						continue;
					}
					
					//Commentary("=====x1 y1, x2 y2="+Text(x1) +","+Text(y1) + " " + Text(x2) + "," + Text(y2));
					
					flag = True;
					for m = 0 to ArrLength(bottomArr) - 1 {
						if (m == i || m == k) {
							continue;
						}
						x =  bottomArr[m];
						y = y1 + (x - x1)*(y2-y1)/(x2-x1);
						diff = lowArr[CurrentBar-x] - y;
						//Commentary("x,y diff=" + Text(x) +","+Text(y) + "," + Text(diff));
						if (diff < 0) {
							//Commentary("-----ignore low x/y pair");
							flag = False;
							break;
						}
					}
					if (flag) {
						//PartLine("low" +Text(i) + "->" + Text(k) +"->"+ Text(m), 
						//				CurrentBar-x1, y1,  
						//				CurrentBar-x2, y2);
					}
				}
			}
			// 最大值
			for i = 0 to ArrLength(topArr)-2 {
				//Commentary("i="+Text(i) +" len=" +Text(ArrLength(topArr)));
				for k = i+1 to ArrLength(topArr)-1 {
					// 获得所有的直线，判断是否都大于等于0
					// y = y1 +[(y2-y1)/(x2-x1)]*(x-x1)
					x1 = topArr[i];
					x2 = topArr[k];
					y1 = highArr[CurrentBar-x1];
					y2 = highArr[CurrentBar-x2];
					// 斜率匹配最小二乘法的结果
					if ((y2-y1)/(x2-x1)*slope <= 0) {
						continue;
					}
					
					//if (x1 == 2243 && x2 == 2294) {
						//Commentary("=====x1 y1, x2 y2=("+Text(x1) +","+Text(y1) + ") (" + Text(x2) + "," + Text(y2) +")");
						
					//}
					
					flag = True;
					for m = 0 to ArrLength(topArr) - 1 {
						if (m == i || m == k) {
							continue;
						}
						x =  topArr[m];
						y = y1 + (x - x1)*(y2-y1)/(x2-x1);
						diff = highArr[CurrentBar-x] - y;
						//Commentary("x,y diff=(" + Text(x) +","+Text(y) + ")," + Text(diff));
						if (diff > 0) {
							//Commentary("-----ignore high x/y pair");
							flag = False;
							break;
						}
					}//for m = 0
					
					if (flag) {
						//Commentary("allow PartLine:(" + Text(x1) +"," +Text(y1) +")");
						//Commentary("allow PartLine:(" + Text(x2) +"," +Text(y2) +")");
						//PartLine("high" +Text(i) + "->" + Text(k) +"->"+ Text(m), 
						//				CurrentBar-x1, y1,  
						//				CurrentBar-x2, y2);
					}//if (flag)
					//break;
				}//for k = i+1 to ArrLength(topArr)-1
				//break;
			}//for i = 0 to ArrLength(topArr)-2
			
		}
		//PlotNumeric("CurrentBar:", (CurrentBar));*/
		
		
		
End
