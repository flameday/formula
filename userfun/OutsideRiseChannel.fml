//--------------------------------------------------------------
// 简称: OutsideRiseChannel
// 名称: 破上涨通道
// 类型: 用户函数
// 输出: Numeric
//--------------------------------------------------------------
Params
	NumericArrayRef highArr;
	Numeric slope;
	NumericArrayRef aArr;
	NumericArrayRef bArr;
Vars
	Integer i;
	Integer k;
	Integer m;
Begin
	// 第一步，先找所有的边界线
	// 这里严格的说，应该遍历所有点，但是快速处理，只取顶底分型
	// 高点
	NumericArray heightArr;
	NumericArray yArray;
	NumericArray xArray;
	Integer size = ArrLength(highArr);
	//Commentary("highArr size:"+Text(size));
	for i = 0 to size-1 {
		ArrAdd(xArray, i);
		ArrAdd(yArray, highArr[i]);
		/*if (i == 0 && size > 1) {
			if (highArr[i] <= highArr[i+1]) {
				ArrAdd(xArray, i);
				ArrAdd(yArray, highArr[i]);
			}
		} else if (i == size-1 && size > 1) {
			if (highArr[i] <= highArr[i-1]) {
				ArrAdd(xArray, i);
				ArrAdd(yArray, highArr[i]);
			}
		} else if (highArr[i] <= highArr[i-1] && highArr[i] <= highArr[i+1]) {
			ArrAdd(xArray, i);
			ArrAdd(yArray, highArr[i]);
		}*/
	}
	ShowArr("xArray", xArray);
	ShowArr("yArray", yArray);
	
	// 第二步，选择合适的边界线
	// 采用通用方案，遍历
	size = ArrLength(xArray);
	
	Numeric distance;
	Numeric step;
	for distance=0 to size-1 {
		Commentary("distance:"+Text(distance));
		for step=0 to size-1 {
			//Commentary("step:"+Text(step));
			
			Numeric real_distance = size - 1 - distance;
			if (real_distance <= 0) {
				break;
			}
			if (size-1-step-real_distance < 0) {
				break;
			}
			Integer x1 = xArray[size-1-step-real_distance];
			Numeric y1 = yArray[size-1-step-real_distance];
			Integer x2 = xArray[size-1-step];
			Numeric y2 = yArray[size-1-step];
			
			Commentary("todo x,y:("+Text(x1)+","+Text(y1)+"), (" +Text(x2)+","+Text(y2)+")");
			
			if ((y2-y1)/(x2-x1)*slope > 0) {
				//遍历所有的点，都符合才行
				Bool flag = True;
				for m=0 to size-1 {
					Integer x =  xArray[m];
					Numeric y = y1 + (x - x1)*(y2-y1)/(x2-x1);
					Numeric diff = yArray[m] - y;//实际值，减去预计值
					if (slope > 0) {
						if (diff < 0) {
							flag = False;
							break;
						}
					}
					if (slope < 0) {
						if (diff > 0) {
							flag = False;
							Commentary("false");
							break;
						}
					}
				}//for m=0 to size-1 {
				//如果符合就直接返回
				if (flag) {
					Commentary("1 allow x,y:("+Text(x1)+","+Text(y1)+"), (" +Text(x2)+","+Text(y2)+")");
					//获得 a b，并加入到数组
					Numeric a = (y2-y1)/(x2-x1);
					Numeric b = y1 - a*x1;
					
					if (a * slope <= 0) {
						Continue;
					}
					
					size = ArrLength(aArr);
					Bool isExists = False;
					for i=0 to size-1 {
						if (aArr[i] == a && bArr[i] == b) {
							isExists = True;
							break;
						}
						if (heightArr[i] >= y2-y1) {
							Commentary("small heightArr[i]>"+Text(y2-y1));
							isExists = True;
							break;
						}
					}
					if (! isExists) {
						ArrAdd(aArr, a);
						ArrAdd(bArr, b);
						ArrAdd(heightArr, y2-y1);
					}
				}//if (flag) {
			}//if ((y2-y1)/(x2-x1)*slope > 0) {
		}//for step=0 to size-1 {
	}
	
	ShowArr("aArr", aArr);
	ShowArr("bArr", bArr);
	ShowArr("heightArr", heightArr);
	Return 0;
End
